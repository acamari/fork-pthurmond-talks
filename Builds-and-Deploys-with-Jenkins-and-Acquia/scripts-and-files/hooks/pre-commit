#!/bin/bash

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
      LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    cat <<\EOF
Error: Attempt to add a non-ASCII file name.
This can cause problems if you want to work with people on other platforms.
To be portable it is advisable to rename the file.
If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
    exit 1
fi

PROJECT=`php -r "echo dirname(dirname(realpath('$0')));"`
PROJECT=$(sed 's/ /\\ /g' <<< "$PROJECT");

if [ "$#" -eq 2 ]
then
    ##CMD="git rev-list $(git rev-list --first-parent ^$1 $2 | tail -n1)^^!"
    #CMD="diff -u <(git rev-list --first-parent $1) <(git rev-list --first-parent $2) | sed -ne 's/^ //p' | head -1"
    CMD="git merge-base $1 $2"
    COMMIT=$($CMD)
    echo ${COMMIT}
    STAGED_FILES=`git --no-pager diff --cached --name-only --diff-filter=ACMR ${COMMIT}`
    echo ${STAGED_FILES}
elif [ "$#" -eq 1 ]
then
    STAGED_FILES=`git --no-pager diff --cached --name-only --diff-filter=ACMR ${1}`
else
    STAGED_FILES=`git diff --cached --name-only --diff-filter=ACMR HEAD`
fi

if hash fin 2>/dev/null; then
    fin lint ${STAGED_FILES}
else
    eval ${PROJECT}/scripts/lint.sh ${STAGED_FILES}
fi


# Run the precommit script in the frontend package.json
command_exists () {
  command -v "$1" >/dev/null 2>&1
}

has_hook_script () {
  [ -f package.json ] && cat package.json | grep -q "\"$1\"[[:space:]]*:"
}

load_nvm () {
  # If nvm is not loaded, load it
  command_exists nvm || {
    export NVM_DIR=~/.nvm
    [ -s "$1/nvm.sh" ] && . "$1/nvm.sh"
  }

  # If nvm has been loaded correctly, use project .nvmrc
  command_exists nvm && nvm use
}

RED='\033[0;31m';
GREEN='\033[0;32m';
ORANGE='\033[0;33m';
VUE_PROJECT="docroot/themes/custom/mytheme/vue"
cd $VUE_PROJECT

# Check if precommit script is defined, skip if not
has_hook_script precommit || exit 0

# Add common path where Node can be found
# Brew standard installation path /usr/local/bin
# Node standard installation path /usr/local
export PATH="$PATH:/usr/local/bin:/usr/local"

# nvm path with standard installation
load_nvm ~/.nvm

# nvm path installed with Brew
load_nvm /usr/local/opt/nvm

# Check that npm exists
command_exists npm || {
  echo >&2 "\n${RED}can't find npm in PATH, skipping precommit script in ${VUE_PROJECT}/package.json"
  exit 0
}

# Export Git hook params
export GIT_PARAMS="$*"

# Run npm script
echo -e "Running frontend precommit hook (node `node -v`)"
echo

npm run -s precommit || {
  echo
  echo "pre-commit hook failed"
  exit 1
}

exit $?
